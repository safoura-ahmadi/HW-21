// <auto-generated />
using System;
using CarCheckup.Infra.EfCore.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarCheckup.Infra.EfCore.Migrations
{
    [DbContext(typeof(CarCheckupDbContext))]
    [Migration("20250124052617_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarCheckup.Domain.Core.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Company")
                        .HasColumnType("int");

                    b.Property<DateOnly>("GenerationYear")
                        .HasColumnType("date");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerMeliCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .IsFixedLength();

                    b.Property<string>("OwnerMobile")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Company = 1,
                            GenerationYear = new DateOnly(2020, 1, 1),
                            ModelId = 2,
                            OwnerMeliCode = "0312889161",
                            OwnerMobile = "09302675549",
                            Plate = "33و283-68"
                        },
                        new
                        {
                            Id = 2,
                            Company = 2,
                            GenerationYear = new DateOnly(2025, 1, 1),
                            ModelId = 3,
                            OwnerMeliCode = "0322879161",
                            OwnerMobile = "09303685549",
                            Plate = "99خ902-33"
                        },
                        new
                        {
                            Id = 3,
                            Company = 1,
                            GenerationYear = new DateOnly(2015, 1, 1),
                            ModelId = 1,
                            OwnerMeliCode = "0312889161",
                            OwnerMobile = "09302675549",
                            Plate = "45ر444-41"
                        });
                });

            modelBuilder.Entity("CarCheckup.Domain.Core.Entities.CarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.ToTable("CarModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "پژو206"
                        },
                        new
                        {
                            Id = 2,
                            Name = "سمند"
                        },
                        new
                        {
                            Id = 3,
                            Name = "پراید"
                        });
                });

            modelBuilder.Entity("CarCheckup.Domain.Core.Entities.CheckupRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateOnly>("TimeToDone")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CheckupRequests");
                });

            modelBuilder.Entity("CarCheckup.Domain.Core.Entities.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar")
                        .IsFixedLength();

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("Operators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "123456",
                            Username = "operator"
                        });
                });

            modelBuilder.Entity("CarCheckup.Domain.Core.Entities.RejectedCheckupRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("RejectedCheckupRequests");
                });

            modelBuilder.Entity("CarCheckup.Domain.Core.Entities.Car", b =>
                {
                    b.HasOne("CarCheckup.Domain.Core.Entities.CarModel", "Model")
                        .WithMany("Cars")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("CarCheckup.Domain.Core.Entities.CheckupRequest", b =>
                {
                    b.HasOne("CarCheckup.Domain.Core.Entities.Car", "Car")
                        .WithMany("CheckupRequests")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarCheckup.Domain.Core.Entities.RejectedCheckupRequest", b =>
                {
                    b.HasOne("CarCheckup.Domain.Core.Entities.Car", "Car")
                        .WithMany("RejectedCheckupRequests")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarCheckup.Domain.Core.Entities.Car", b =>
                {
                    b.Navigation("CheckupRequests");

                    b.Navigation("RejectedCheckupRequests");
                });

            modelBuilder.Entity("CarCheckup.Domain.Core.Entities.CarModel", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
